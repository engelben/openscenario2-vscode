{
	"name": "OpenSCENARIO2",
	"scopeName": "source.osc2",
	"patterns": [
		{
			"include": "#statement"
		},
		{
			"include": "#expression"
		}
	],
	"repository": {
		"statement": {
			"patterns": [
				{
					"include": "#import"
				},
				{
					"include": "#statement-keyword"
				},
				{
					"include": "#class-declaration"
				},
				{
					"include": "#assignment-operator"
				}
			]
		},
		"import": {
			"comment": "Import statements used to correctly mark `import`",
			"patterns": [
        {
          "name": "keyword.control.import.osc2",
          "match": "\\b(import)\\b"
        }
			]
		},
    "statement-keyword": {
    "patterns": [
      {
            "name": "keyword.control.flow.temporal.osc2",
            "match": "\\b(serial|parallel)\\b"
        },
        {
            "name": "keyword.control.flow.osc2",
            "match": "\\b(with|do)\\b"
        },
        {
            "name": "keyword.other.osc2",
            "match": "\\b(any|cover|type|event|actor|scenario|emit|label|sample|soft|default|struct|when|var)\\b"
        },
        {
            "name": "storage.type.class.osc2",
            "match": "\\b(type|event|actor|scenario|struct)\\b"
        }
        ]
    },
    "assignment-operator": {
        "name": "keyword.operator.assignment.osc2",
        "match": ":| = |@"
    },
    "expression": {
        "comment": "All valid expressions",
        "patterns": [
            {
                "include": "#expression-base"
            },
            {
                "include": "#member-access"
            },
            {
                "comment": "Tokenize identifiers to help linters",
                "match": "\\b([a-zA-Z_]\\w*)\\b"
            }
        ]
    },
    "expression-base": {
    "comment": "valid expressions with comments",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#expression-bare"
        }
    ]
  },
  "comments": {
      "patterns": [
          {
              "name": "comment.block.osc2",
              "begin": "(\"{3,})$",
              "end": "\"{3,}$"
          },
          {
              "name": "comment.inline.osc2",
              "match": "(#+).*$"
          }
      ]
  },
  "expression-bare": {
    "comment": "valid expressions without comments",
    "patterns": [
        {
            "include": "#string"
        },
        {
            "include": "#literal"
        },
        {
            "include": "#function-call"
        },
        {
            "include": "#ellipsis"
        },
        {
            "include": "#operator"
        },
        {
            "include": "#curly-braces"
        },
        {
            "include": "#round-braces"
        },
        {
            "include": "#list"
        },
        {
            "include": "#builtin-callables"
        }
    ]
    },
    "string": {
      "patterns": [
          {
              "name": "string.quoted.double.osc2",
              "begin": "\"",
              "end": "\""
          },
          {
              "name": "string.quoted.single.osc2",
              "begin": "'",
              "end": "'"
          }
      ]
  },
  "literal": {
      "patterns": [
          {
              "name": "constant.language.osc2",
              "match": "\b(true|false)\b"
          },
				{
					"include": "#number"
				}
      ]
  },
  "number": {
    "name": "constant.numeric.osc2",
    "patterns": [
        {
            "include": "#number-int"
        },
        {
            "include": "#number-float"
        }
    ]
  },
  "number-float": {
      "match": "\\b([0-9]+[\\.][0-9]+)([\\w]+)?\\b",
      "captures": {
          "1": {
              "name": "constant.numeric.float.osc2"
          },
          "2": {
              "name": "constant.other.physicaltype.osc2"
          }
      }
  },
  "number-int": {
      "patterns": [
          {
              "match": "\\b(?<!\\.)([1-9]{1,}[0-9]+)(?!\\.)(\\w+)?\\b",
              "captures": {
                  "1": {
                      "name": "constant.numeric.integer.osc2"
                  },
                  "2": {
                      "name": "constant.other.physicaltype.osc2"
                  }
              }
          },
          {
              "match": "\\b(?<!\\.)([0-9])(?!\\.)([a-zA-Z]+)?\\b",
              "captures": {
                  "1": {
                      "name": "constant.numeric.integer.osc2"
                  },
                  "2": {
                      "name": "constant.other.physicaltype.osc2"
                  }
              }
          }
      ]
  },
  "builtin-callables": {
      "patterns": [
          {
              "include": "#builtin-functions"
          },
          {
              "include": "#builtin-types"
          }
      ]
  },
  "builtin-functions": {
      "patterns": [
          {
              "name": "support.function.builtin.osc2",
              "match": "(?<!\\.)\\b(keep|until)\\b"
          }
      ]
  },
  "builtin-types": {
      "name": "support.type.osc2",
      "match": "(?<!\\.)\\b(int|uint|float|string|weight|distance|time|current|temperature|substance|luminosity|angle|struct|list|bool)\\b"
  },
  "member-access": {
    "name": "meta.member.access.osc2",
    "begin": "(\\.)\\s*(?!\\.)",
    "end": "(?<=\\S)(?=\\W)|(^|(?<=\\s))(?=[^\\\\\\w\\s])|$",
    "beginCaptures": {
        "1": {
            "name": "punctuation.separator.period.osc2"
        }
    },
    "patterns": [
        {
            "include": "#function-call"
        },
        {
            "include": "#member-access-base"
        },
        {
            "include": "#member-access-attribute"
        }
    ]
  },
  "function-call": {
      "name": "meta.function-call.osc2",
      "comment": "Regular function call of the type name(args)",
      "begin": "\\b(?=([a-zA-Z_]\\w*)(\\())",
      "end": "(\\))",
      "endCaptures": {
          "1": {
              "name": "punctuation.definition.arguments.end.osc2"
          }
      },
      "patterns": [
          {
              "include": "#builtin-callables"
          },
          {
              "include": "#function-name"
          },
          {
              "include": "#function-arguments"
          }
      ]
  },
  "function-name": {
      "patterns": [
          {
              "name": "meta.function-call.generic.osc2",
              "match": "\\b([a-zA-Z_]\\w*)\\b"
          }
      ]
  },
  "function-arguments": {
      "begin": "(\\()",
      "end": "(?=\\))(?!\\)\\s*\\()",
      "beginCaptures": {
          "1": {
              "name": "punctuation.definition.arguments.begin.osc2"
          }
      },
      "contentName": "meta.function-call.arguments.osc2",
      "patterns": [
        {
            "name": "punctuation.separator.arguments.osc2",
            "match": "(\\,)"
        },
        {
            "match": "\\b([a-zA-Z_]\\w*)\\s*(=)(?!=)",
            "captures": {
                "1": {
                    "name": "variable.parameter.function-call.osc2"
                }
            }
				},
        {
          "include": "#assignment-operator"
        },
				{
					"include": "#expression"
        },
        {
					"match": "\\s*(\\))\\s*(\\()",
					"captures": {
						"1": {
							"name": "punctuation.definition.arguments.end.python"
						},
						"2": {
							"name": "punctuation.definition.arguments.begin.python"
						}
					}
				}
      ]
  },
  "member-access-base": {
      "patterns": [
          {
              "include": "#item-access"
          }
      ]
  },
  "item-access": {
    "patterns": [
      {
        "name": "meta.item-access.osc2",
        "begin": "\\b(?=[a-zA-Z_]\\w*\\s*\\[)",
        "end": "(\\])",
        "endCaptures": {
          "1": {
            "name": "punctuation.definition.arguments.end.osc2"
          }
        },
        "patterns": [
          {
            "include": "#item-name"
          },
          {
            "include": "#item-index"
          },
          {
            "include": "#expression"
          }
        ]
      }
    ]
  },
  "item-name": {
    "patterns": [
      {
        "include": "#special-variables"
      },
      {
        "include": "#builtin-functions"
      },
      {
        "include": "#special-names"
      },
      {
        "name": "meta.indexed-name.osc2",
        "match": "\\b([a-zA-Z_]\\w*)\\b"
      }
    ]
  },
  "special-variables": {
    "match": "\\b(?<!\\.)(?:(it))\\b",
    "captures": {
      "1": {
        "name": "variable.language.special.self.osc2"
      }
    }
  },
  "special-names": {
    "name": "constant.other.caps.osc2",
    "match": "\\b(_*[A-Z][_\\d]*[A-Z])[A-Z\\d]*(_\\w*)?\\b"
  },
  "item-index": {
    "begin": "(\\[)",
    "end": "(?=\\])",
    "beginCaptures": {
      "1": {
        "name": "punctuation.definition.arguments.begin.osc2"
      }
    },
    "contentName": "meta.item-access.arguments.osc2",
    "patterns": [
      {
        "name": "punctuation.separator.slice.osc2",
        "match": ":"
      },
      {
        "include": "#expression"
      }
    ]
  },
  "member-access-attribute": {
      "comment": "Highlight attribute access in otherwise non-specialized cases.",
      "name": "meta.attribute.osc2",
      "match": "\\b([a-zA-Z_]\\w*)\\b"
  },
  "class-declaration": {
			"patterns": [
        {
					"name": "meta.class.python",
					"begin": "\\b(?<=: )(?=\\w*)",
					"end": " ",
					"patterns": [
						{
							"include": "#class-name"
						}
					]
				}
			]
		},
		"class-name": {
			"patterns": [
				{
					"name": "entity.name.type.class.osc2",
					"match": "\\b([a-zA-Z_]\\w*)"
				},
				{
					"include": "#builtin-callables"
				}
			]
		}
  }
}